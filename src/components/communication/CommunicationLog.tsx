import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { CheckCircle, AlertTriangle, MessageSquare, Mail, Phone, User, Calendar as CalendarIcon } from "lucide-react";
import { cn } from "@/lib/utils";
import { format } from "date-fns";
import { communicationService } from "@/services/communicationService";

interface CommunicationLogProps {
  selectedOfficer: string;
}

interface AutoGeneratedCommunication {
  id: string;
  merchantName: string;
  merchantId: string;
  terminalId: string;
  type: string;
  date: string;
  officer: string;
  officerEmail: string;
  subject: string;
  notes: string;
  status: string;
  followUpDate: string;
  inactiveDays: number;
  autoGenerated: boolean;
}

export function CommunicationLog({ selectedOfficer }: CommunicationLogProps) {
  const [communications, setCommunications] = useState<AutoGeneratedCommunication[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const loadCommunications = async () => {
      try {
        setLoading(true);
        const autoComms = await communicationService.generateAutoCommunications();
        setCommunications(autoComms);
      } catch (error) {
        console.error('Error loading communications:', error);
        setCommunications([]);
      } finally {
        setLoading(false);
      }
    };

    loadCommunications();
  }, []);

  function getOfficerName(officerId: string): string {
    const officers: { [key: string]: string } = {
      'officer1': 'Takudzwa Madyira',
      'officer2': 'Olivia Usai',
      'officer3': 'Tinashe Mariridza',
      'officer4': 'Mufaro Maphosa',
    };
    return officers[officerId] || '';
  }

  const filteredCommunications = communications.filter(comm => {
    const matchesOfficer = selectedOfficer === 'all' || comm.officer === getOfficerName(selectedOfficer);
    return matchesOfficer;
  });

  const generateMoreCommunications = async () => {
    try {
      const newComms = await communicationService.generateAutoCommunications();
      setCommunications(prev => [...prev, ...newComms]);
    } catch (error) {
      console.error('Error generating communications:', error);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto"></div>
          <p className="mt-2 text-gray-600">Loading communications...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Communications</CardTitle>
            <MessageSquare className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{communications.length}</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Pending Follow-ups</CardTitle>
            <AlertTriangle className="h-4 w-4 text-orange-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-orange-500">{communications.filter(c => c.status === 'Pending').length}</div>
            <div className="text-xs text-muted-foreground">
              {communications.length > 0 ? ((communications.filter(c => c.status === 'Pending').length / communications.length) * 100).toFixed(1) : 0}% of total
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Resolved Issues</CardTitle>
            <CheckCircle className="h-4 w-4 text-green-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">{communications.filter(c => c.status === 'Resolved').length}</div>
            <div className="text-xs text-muted-foreground">
              {communications.length > 0 ? ((communications.filter(c => c.status === 'Resolved').length / communications.length) * 100).toFixed(1) : 0}% of total
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Auto-Generated</CardTitle>
            <MessageSquare className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{communications.filter(c => c.autoGenerated).length}</div>
          </CardContent>
        </Card>
      </div>

      {/* Communication Log Table */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle>Communication Log</CardTitle>
            <Button onClick={generateMoreCommunications}>Generate More</Button>
          </div>
        </CardHeader>
        <CardContent>
          <div className="rounded-md border">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Merchant</TableHead>
                  <TableHead>Type</TableHead>
                  <TableHead>Date</TableHead>
                  <TableHead>Officer</TableHead>
                  <TableHead>Subject</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Follow-Up Date</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredCommunications.map((comm) => (
                  <TableRow key={comm.id}>
                    <TableCell>
                      <div>
                        <div className="font-medium">{comm.merchantName}</div>
                        <div className="text-sm text-gray-500">{comm.merchantId} â€¢ {comm.terminalId}</div>
                      </div>
                    </TableCell>
                    <TableCell>{comm.type}</TableCell>
                    <TableCell>{comm.date}</TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <User className="h-4 w-4" />
                        {comm.officer}
                        <Button variant="ghost" size="icon">
                          <Mail className="h-4 w-4" />
                        </Button>
                        <Button variant="ghost" size="icon">
                          <Phone className="h-4 w-4" />
                        </Button>
                      </div>
                    </TableCell>
                    <TableCell>
                      <div>
                        <div className="font-medium">{comm.subject}</div>
                        <div className="text-sm text-gray-500">{comm.notes}</div>
                      </div>
                    </TableCell>
                    <TableCell>
                      <Badge variant="secondary">{comm.status}</Badge>
                    </TableCell>
                    <TableCell>
                      <Popover>
                        <PopoverTrigger asChild>
                          <Button
                            variant={"outline"}
                            className={cn(
                              "w-[240px] justify-start text-left font-normal",
                              !comm.followUpDate && "text-muted-foreground"
                            )}
                          >
                            <CalendarIcon className="mr-2 h-4 w-4" />
                            {comm.followUpDate ? (
                              format(new Date(comm.followUpDate), "PPP")
                            ) : (
                              <span>Pick a date</span>
                            )}
                          </Button>
                        </PopoverTrigger>
                        <PopoverContent className="w-auto p-0" align="center" side="bottom">
                          <Calendar
                            mode="single"
                            selected={comm.followUpDate ? new Date(comm.followUpDate) : undefined}
                            onSelect={(date) => console.log("Selected date:", date)}
                            disabled={(date) =>
                              date > new Date() || date < new Date("1900-01-01")
                            }
                            initialFocus
                          />
                        </PopoverContent>
                      </Popover>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
