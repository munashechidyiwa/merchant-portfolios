import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Calendar, MessageSquare, Phone, Mail, Plus, Search, Bot, CheckCircle, Clock } from "lucide-react";
import { communicationService, AutoGeneratedCommunication } from "@/services/communicationService";

interface CommunicationLogProps {
  selectedOfficer: string;
  isAdmin?: boolean;
}

const mockCommunications = [
  {
    id: 'C001',
    merchantName: 'Sunset Cafe',
    merchantId: 'M001',
    type: 'Phone Call',
    date: '2024-01-20',
    officer: 'Sarah Johnson',
    subject: 'Terminal Issue Resolution',
    notes: 'Resolved connectivity issue with terminal T001. Provided troubleshooting guide.',
    followUpDate: '2024-01-25',
    status: 'Completed',
    autoGenerated: false
  },
  {
    id: 'C002',
    merchantName: 'Tech Solutions Inc',
    merchantId: 'M002',
    type: 'Email',
    date: '2024-01-19',
    officer: 'Michael Chen',
    subject: 'Monthly Performance Review',
    notes: 'Sent monthly transaction summary and performance metrics. Discussed expansion opportunities.',
    followUpDate: '2024-02-15',
    status: 'Follow-up Scheduled',
    autoGenerated: false
  }
];

export function CommunicationLog({ selectedOfficer, isAdmin = false }: CommunicationLogProps) {
  const [searchTerm, setSearchTerm] = useState('');
  const [typeFilter, setTypeFilter] = useState('all');
  const [statusFilter, setStatusFilter] = useState('all');
  const [communications, setCommunications] = useState<any[]>(mockCommunications);
  const [autoGeneratedComms, setAutoGeneratedComms] = useState<AutoGeneratedCommunication[]>([]);

  useEffect(() => {
    // Generate automated communications on component mount
    const generated = communicationService.generateInactiveCommunications();
    setAutoGeneratedComms(generated);
  }, []);

  const allCommunications = [...communications, ...autoGeneratedComms];

  const filteredCommunications = allCommunications.filter(comm => {
    const matchesSearch = comm.merchantName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         comm.subject.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesType = typeFilter === 'all' || comm.type.toLowerCase().includes(typeFilter.toLowerCase());
    const matchesStatus = statusFilter === 'all' || comm.status.toLowerCase().includes(statusFilter.toLowerCase());
    const matchesOfficer = selectedOfficer === 'all' || comm.officer === getOfficerName(selectedOfficer);
    
    return matchesSearch && matchesType && matchesStatus && matchesOfficer;
  });

  function getOfficerName(officerId: string): string {
    const officers: { [key: string]: string } = {
      'officer1': 'Sarah Johnson',
      'officer2': 'Michael Chen',
      'officer3': 'Emily Rodriguez',
      'officer4': 'David Thompson',
      'officer5': 'Lisa Wang',
      'officer6': 'James Wilson',
    };
    return officers[officerId] || '';
  }

  const handleGenerateAutoCommunications = async () => {
    const generated = communicationService.generateInactiveCommunications();
    setAutoGeneratedComms(generated);
    
    // Send email notifications for generated communications
    for (const comm of generated) {
      if (comm.status === 'Pending') {
        const emailNotification = communicationService.generateEmailNotification(comm);
        await communicationService.sendEmailNotification(emailNotification);
        
        // Update status to sent
        comm.status = 'Sent';
      }
    }
    
    console.log(`Generated ${generated.length} automated communications`);
  };

  const handleAcknowledgeCommunication = (commId: string) => {
    setAutoGeneratedComms(prev => 
      prev.map(comm => 
        comm.id === commId ? { ...comm, status: 'Acknowledged' as const } : comm
      )
    );
  };

  const getStatusBadgeColor = (status: string) => {
    switch (status) {
      case 'Completed': return 'bg-green-100 text-green-800';
      case 'Follow-up Required': return 'bg-orange-100 text-orange-800';
      case 'Follow-up Scheduled': return 'bg-blue-100 text-blue-800';
      case 'Pending': return 'bg-yellow-100 text-yellow-800';
      case 'Sent': return 'bg-purple-100 text-purple-800';
      case 'Acknowledged': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="space-y-6">
      {/* Communication Summary */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Communications</CardTitle>
            <MessageSquare className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{filteredCommunications.length}</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Auto-Generated</CardTitle>
            <Bot className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-600">
              {filteredCommunications.filter(c => c.autoGenerated || c.type === 'Auto-Generated').length}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Follow-ups Required</CardTitle>
            <Calendar className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-orange-600">
              {filteredCommunications.filter(c => c.status === 'Follow-up Required' || c.status === 'Pending').length}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Phone Calls</CardTitle>
            <Phone className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {filteredCommunications.filter(c => c.type === 'Phone Call').length}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Acknowledged</CardTitle>
            <CheckCircle className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">
              {filteredCommunications.filter(c => c.status === 'Acknowledged').length}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Communication Log */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle>Communication Log</CardTitle>
            <div className="flex space-x-2">
              <Button onClick={handleGenerateAutoCommunications} variant="outline">
                <Bot className="h-4 w-4 mr-2" />
                Generate Auto Communications
              </Button>
              {isAdmin && (
                <Dialog>
                  <DialogTrigger asChild>
                    <Button>
                      <Plus className="h-4 w-4 mr-2" />
                      New Communication
                    </Button>
                  </DialogTrigger>
                  <DialogContent className="max-w-2xl">
                    <DialogHeader>
                      <DialogTitle>Log New Communication</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4">
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <label className="text-sm font-medium">Merchant</label>
                          <Select>
                            <SelectTrigger>
                              <SelectValue placeholder="Select merchant" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="M001">Sunset Cafe</SelectItem>
                              <SelectItem value="M002">Tech Solutions Inc</SelectItem>
                              <SelectItem value="M003">Fashion Boutique</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                        <div>
                          <label className="text-sm font-medium">Communication Type</label>
                          <Select>
                            <SelectTrigger>
                              <SelectValue placeholder="Select type" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="phone">Phone Call</SelectItem>
                              <SelectItem value="email">Email</SelectItem>
                              <SelectItem value="visit">In-Person Visit</SelectItem>
                              <SelectItem value="training">Training Session</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                      </div>
                      <div>
                        <label className="text-sm font-medium">Subject</label>
                        <Input placeholder="Enter subject" />
                      </div>
                      <div>
                        <label className="text-sm font-medium">Notes</label>
                        <Textarea placeholder="Enter communication details" rows={4} />
                      </div>
                      <div>
                        <label className="text-sm font-medium">Follow-up Date</label>
                        <Input type="date" />
                      </div>
                      <Button className="w-full">Save Communication</Button>
                    </div>
                  </DialogContent>
                </Dialog>
              )}
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="flex flex-wrap gap-4 mb-6">
            <div className="relative flex-1 min-w-64">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
              <Input
                placeholder="Search communications..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
            
            <Select value={typeFilter} onValueChange={setTypeFilter}>
              <SelectTrigger className="w-40">
                <SelectValue placeholder="Type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Types</SelectItem>
                <SelectItem value="phone">Phone Call</SelectItem>
                <SelectItem value="email">Email</SelectItem>
                <SelectItem value="visit">In-Person Visit</SelectItem>
              </SelectContent>
            </Select>

            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger className="w-40">
                <SelectValue placeholder="Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="completed">Completed</SelectItem>
                <SelectItem value="follow-up">Follow-up Required</SelectItem>
                <SelectItem value="scheduled">Follow-up Scheduled</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="rounded-md border">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Date</TableHead>
                  <TableHead>Merchant</TableHead>
                  <TableHead>Type</TableHead>
                  <TableHead>Subject</TableHead>
                  <TableHead>Officer</TableHead>
                  <TableHead>Follow-up</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredCommunications.map((comm) => (
                  <TableRow key={comm.id}>
                    <TableCell>{new Date(comm.date).toLocaleDateString()}</TableCell>
                    <TableCell>
                      <div>
                        <div className="font-medium">{comm.merchantName}</div>
                        <div className="text-sm text-gray-500">{comm.merchantId}</div>
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center space-x-2">
                        <Badge variant="outline">{comm.type}</Badge>
                        {(comm.autoGenerated || comm.type === 'Auto-Generated') && (
                          <Bot className="h-4 w-4 text-blue-600" title="Auto-generated" />
                        )}
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="max-w-xs">
                        <div className="font-medium">{comm.subject}</div>
                        <div className="text-sm text-gray-500 truncate">{comm.notes}</div>
                      </div>
                    </TableCell>
                    <TableCell>
                      <div>
                        <div className="font-medium">{comm.officer}</div>
                        {comm.officerEmail && (
                          <div className="text-sm text-gray-500">{comm.officerEmail}</div>
                        )}
                      </div>
                    </TableCell>
                    <TableCell>{new Date(comm.followUpDate).toLocaleDateString()}</TableCell>
                    <TableCell>
                      <Badge 
                        variant="outline"
                        className={getStatusBadgeColor(comm.status)}
                      >
                        {comm.status}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      {comm.status === 'Sent' && (
                        <Button 
                          variant="outline" 
                          size="sm"
                          onClick={() => handleAcknowledgeCommunication(comm.id)}
                        >
                          Acknowledge
                        </Button>
                      )}
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
