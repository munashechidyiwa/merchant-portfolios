
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { Bell, AlertTriangle, Clock, CheckCircle, X, Bot, Settings, Mail } from "lucide-react";
import { alertService, SystemAlert, AlertSettings } from "@/services/alertService";

interface AlertsPanelProps {
  selectedOfficer: string;
  isAdmin?: boolean;
}

const mockAlerts: SystemAlert[] = [
  {
    id: 'A001',
    type: 'Terminal Inactive',
    severity: 'High',
    message: 'Terminal T003 at Fashion Boutique has been inactive for 5 days',
    merchant: 'Fashion Boutique',
    officer: 'Emily Rodriguez',
    timestamp: '2024-01-20T09:30:00',
    status: 'Unread',
    autoGenerated: false,
    actionRequired: 'Contact Merchant',
    dueDate: '2024-01-21T09:30:00'
  }
];

export function AlertsPanel({ selectedOfficer, isAdmin = false }: AlertsPanelProps) {
  const [filterStatus, setFilterStatus] = useState('all');
  const [filterSeverity, setFilterSeverity] = useState('all');
  const [alerts, setAlerts] = useState<SystemAlert[]>([]);
  const [alertSettings, setAlertSettings] = useState<AlertSettings[]>([]);
  const [isSettingsDialogOpen, setIsSettingsDialogOpen] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    // Load alert settings and generate system alerts
    const settings = alertService.getAlertSettings();
    setAlertSettings(settings);
    
    // Load initial alerts
    setAlerts([...mockAlerts]);
  }, []);

  const filteredAlerts = alerts.filter(alert => {
    const matchesStatus = filterStatus === 'all' || alert.status.toLowerCase() === filterStatus;
    const matchesSeverity = filterSeverity === 'all' || alert.severity.toLowerCase() === filterSeverity;
    const matchesOfficer = selectedOfficer === 'all' || alert.officer === getOfficerName(selectedOfficer);
    
    return matchesStatus && matchesSeverity && matchesOfficer;
  });

  function getOfficerName(officerId: string): string {
    const officers: { [key: string]: string } = {
      'officer1': 'Takudzwa Madyira',
      'officer2': 'Olivia Usai',
      'officer3': 'Tinashe Mariridza',
      'officer4': 'Mufaro Maphosa',
      'all': 'All Officers'
    };
    return officers[officerId] || '';
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'High': return 'bg-red-100 text-red-800';
      case 'Medium': return 'bg-yellow-100 text-yellow-800';
      case 'Low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'Unread': return <Bell className="h-4 w-4 text-red-600" />;
      case 'Read': return <Clock className="h-4 w-4 text-yellow-600" />;
      case 'Acknowledged': return <CheckCircle className="h-4 w-4 text-green-600" />;
      case 'Resolved': return <CheckCircle className="h-4 w-4 text-blue-600" />;
      default: return <Bell className="h-4 w-4 text-gray-400" />;
    }
  };

  const handleGenerateAlerts = async () => {
    setIsGenerating(true);
    
    try {
      // Simulate alert generation process
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      const systemAlerts = alertService.generateSystemAlerts();
      
      // Add more realistic generated alerts
      const additionalAlerts: SystemAlert[] = [
        {
          id: `A${Date.now()}-1`,
          type: 'Low Activity',
          severity: 'Medium',
          message: 'Terminal T007 at Corner Store has processed only 2 transactions in the last 7 days',
          merchant: 'Corner Store',
          officer: getOfficerName(selectedOfficer) || 'System Admin',
          timestamp: new Date().toISOString(),
          status: 'Unread',
          autoGenerated: true,
          actionRequired: 'Contact Merchant for Activity Check',
          dueDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString()
        },
        {
          id: `A${Date.now()}-2`,
          type: 'Revenue Drop',
          severity: 'High',
          message: 'Tech Hub merchant revenue dropped by 45% compared to last month',
          merchant: 'Tech Hub',
          officer: getOfficerName(selectedOfficer) || 'System Admin',
          timestamp: new Date().toISOString(),
          status: 'Unread',
          autoGenerated: true,
          actionRequired: 'Schedule Business Review Meeting',
          dueDate: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000).toISOString()
        },
        {
          id: `A${Date.now()}-3`,
          type: 'Terminal Error',
          severity: 'High',
          message: 'Terminal T012 at Pharmacy Plus reporting connectivity issues for 3 consecutive days',
          merchant: 'Pharmacy Plus',
          officer: getOfficerName(selectedOfficer) || 'System Admin',
          timestamp: new Date().toISOString(),
          status: 'Unread',
          autoGenerated: true,
          actionRequired: 'Technical Support Required',
          dueDate: new Date(Date.now() + 0.5 * 24 * 60 * 60 * 1000).toISOString()
        },
        {
          id: `A${Date.now()}-4`,
          type: 'Target Achievement',
          severity: 'Low',
          message: 'Monthly revenue target achievement at 95% - on track for success',
          merchant: 'All Merchants',
          officer: getOfficerName(selectedOfficer) || 'System Admin',
          timestamp: new Date().toISOString(),
          status: 'Unread',
          autoGenerated: true,
          actionRequired: 'Continue Current Strategy',
          dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()
        }
      ];

      setAlerts(prev => [...prev.filter(a => !a.autoGenerated), ...systemAlerts, ...additionalAlerts]);
      
      toast({
        title: "System Alerts Generated",
        description: `Generated ${systemAlerts.length + additionalAlerts.length} new system alerts based on current data analysis.`,
      });

      console.log(`Generated ${systemAlerts.length + additionalAlerts.length} new system alerts`);
    } catch (error) {
      toast({
        title: "Generation Failed",
        description: "Failed to generate system alerts. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleAcknowledgeAlert = (alertId: string) => {
    setAlerts(prev => 
      prev.map(alert => 
        alert.id === alertId ? { ...alert, status: 'Acknowledged' as const } : alert
      )
    );
    alertService.acknowledgeAlert(alertId);
    
    toast({
      title: "Alert Acknowledged",
      description: "The alert has been marked as acknowledged.",
    });
  };

  const handleResolveAlert = (alertId: string) => {
    setAlerts(prev => 
      prev.map(alert => 
        alert.id === alertId ? { ...alert, status: 'Resolved' as const } : alert
      )
    );
    alertService.resolveAlert(alertId);
    
    toast({
      title: "Alert Resolved",
      description: "The alert has been marked as resolved.",
    });
  };

  const handleUpdateSettings = (updatedSettings: AlertSettings[]) => {
    setAlertSettings(updatedSettings);
    alertService.updateAlertSettings(updatedSettings);
    
    toast({
      title: "Settings Updated",
      description: "Alert settings have been successfully updated.",
    });
  };

  const getActionRequiredColor = (dueDate: string) => {
    const due = new Date(dueDate);
    const now = new Date();
    const hoursUntilDue = (due.getTime() - now.getTime()) / (1000 * 60 * 60);
    
    if (hoursUntilDue < 0) return 'text-red-600'; // Overdue
    if (hoursUntilDue < 24) return 'text-orange-600'; // Due soon
    return 'text-gray-600'; // Normal
  };

  return (
    <div className="space-y-6">
      {/* Alert Summary */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Alerts</CardTitle>
            <Bell className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{filteredAlerts.length}</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Unread</CardTitle>
            <AlertTriangle className="h-4 w-4 text-red-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-600">
              {filteredAlerts.filter(a => a.status === 'Unread').length}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">High Priority</CardTitle>
            <AlertTriangle className="h-4 w-4 text-red-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-600">
              {filteredAlerts.filter(a => a.severity === 'High').length}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Auto-Generated</CardTitle>
            <Bot className="h-4 w-4 text-blue-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-600">
              {filteredAlerts.filter(a => a.autoGenerated).length}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Resolved</CardTitle>
            <CheckCircle className="h-4 w-4 text-green-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">
              {filteredAlerts.filter(a => a.status === 'Resolved').length}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Active Alerts */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle>Active Alerts</CardTitle>
            <div className="flex space-x-2">
              <Button 
                onClick={handleGenerateAlerts} 
                variant="outline"
                disabled={isGenerating}
              >
                <Bot className="h-4 w-4 mr-2" />
                {isGenerating ? 'Generating...' : 'Generate System Alerts'}
              </Button>
              {isAdmin && (
                <Dialog open={isSettingsDialogOpen} onOpenChange={setIsSettingsDialogOpen}>
                  <DialogTrigger asChild>
                    <Button variant="outline">
                      <Settings className="h-4 w-4 mr-2" />
                      Alert Settings
                    </Button>
                  </DialogTrigger>
                  <DialogContent className="max-w-2xl">
                    <DialogHeader>
                      <DialogTitle>Alert Settings Configuration</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4 max-h-96 overflow-y-auto">
                      {alertSettings.map((setting, index) => (
                        <div key={setting.id} className="flex items-center justify-between p-4 border rounded-lg">
                          <div className="flex-1">
                            <div className="font-medium">{setting.name}</div>
                            <div className="text-sm text-gray-600">{setting.description}</div>
                            <div className="flex items-center space-x-4 mt-2">
                              <div className="flex items-center space-x-2">
                                <Label className="text-xs">Threshold:</Label>
                                <Input 
                                  value={setting.threshold} 
                                  className="h-6 w-20 text-xs"
                                  onChange={(e) => {
                                    const updated = [...alertSettings];
                                    updated[index].threshold = e.target.value;
                                    setAlertSettings(updated);
                                  }}
                                />
                              </div>
                              <div className="flex items-center space-x-2">
                                <Label className="text-xs">Email:</Label>
                                <Switch 
                                  checked={setting.emailNotification}
                                  onCheckedChange={(checked) => {
                                    const updated = [...alertSettings];
                                    updated[index].emailNotification = checked;
                                    setAlertSettings(updated);
                                  }}
                                />
                              </div>
                            </div>
                          </div>
                          <Switch 
                            checked={setting.enabled}
                            onCheckedChange={(checked) => {
                              const updated = [...alertSettings];
                              updated[index].enabled = checked;
                              setAlertSettings(updated);
                            }}
                          />
                        </div>
                      ))}
                    </div>
                    <div className="flex justify-end space-x-2">
                      <Button variant="outline" onClick={() => setIsSettingsDialogOpen(false)}>
                        Cancel
                      </Button>
                      <Button onClick={() => {
                        handleUpdateSettings(alertSettings);
                        setIsSettingsDialogOpen(false);
                      }}>
                        Save Settings
                      </Button>
                    </div>
                  </DialogContent>
                </Dialog>
              )}
              
              <Select value={filterStatus} onValueChange={setFilterStatus}>
                <SelectTrigger className="w-32">
                  <SelectValue placeholder="Status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Status</SelectItem>
                  <SelectItem value="unread">Unread</SelectItem>
                  <SelectItem value="read">Read</SelectItem>
                  <SelectItem value="acknowledged">Acknowledged</SelectItem>
                </SelectContent>
              </Select>

              <Select value={filterSeverity} onValueChange={setFilterSeverity}>
                <SelectTrigger className="w-32">
                  <SelectValue placeholder="Severity" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Severity</SelectItem>
                  <SelectItem value="high">High</SelectItem>
                  <SelectItem value="medium">Medium</SelectItem>
                  <SelectItem value="low">Low</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {filteredAlerts.map((alert) => (
              <div key={alert.id} className="flex items-start justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                <div className="flex items-start space-x-3 flex-1">
                  <div className="flex flex-col items-center space-y-1">
                    {getStatusIcon(alert.status)}
                    {alert.autoGenerated && (
                      <Bot className="h-3 w-3 text-blue-600" />
                    )}
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-1">
                      <Badge variant="outline">{alert.type}</Badge>
                      <Badge className={getSeverityColor(alert.severity)}>
                        {alert.severity}
                      </Badge>
                      {alert.terminalId && (
                        <Badge variant="outline" className="text-xs">
                          {alert.terminalId}
                        </Badge>
                      )}
                    </div>
                    <div className="font-medium">{alert.message}</div>
                    <div className="text-sm text-gray-600">
                      {alert.merchant} • {alert.officer} • {new Date(alert.timestamp).toLocaleString()}
                    </div>
                    <div className={`text-sm font-medium ${getActionRequiredColor(alert.dueDate)}`}>
                      Action Required: {alert.actionRequired} (Due: {new Date(alert.dueDate).toLocaleDateString()})
                    </div>
                  </div>
                </div>
                <div className="flex space-x-2">
                  {alert.status === 'Unread' && (
                    <Button 
                      variant="outline" 
                      size="sm"
                      onClick={() => handleAcknowledgeAlert(alert.id)}
                    >
                      Acknowledge
                    </Button>
                  )}
                  {(alert.status === 'Acknowledged' || alert.status === 'Read') && (
                    <Button 
                      variant="outline" 
                      size="sm"
                      onClick={() => handleResolveAlert(alert.id)}
                      className="bg-green-50 hover:bg-green-100"
                    >
                      Resolve
                    </Button>
                  )}
                  <Button variant="outline" size="sm">
                    <X className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Alert Settings */}
      <Card>
        <CardHeader>
          <CardTitle>Alert Settings</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {alertSettings.map((setting) => (
              <div key={setting.id} className="flex items-center justify-between p-3 border rounded-lg">
                <div className="flex-1">
                  <div className="font-medium">{setting.name}</div>
                  <div className="text-sm text-gray-600">{setting.description}</div>
                  <div className="text-xs text-gray-500 mt-1">Threshold: {setting.threshold}</div>
                </div>
                <Switch checked={setting.enabled} />
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
