
import { dataProcessor } from '@/utils/dataProcessing';

export interface AutoGeneratedCommunication {
  id: string;
  merchantName: string;
  merchantId: string;
  type: 'Auto-Generated';
  date: string;
  officer: string;
  officerEmail: string;
  subject: string;
  notes: string;
  followUpDate: string;
  status: 'Pending' | 'Sent' | 'Acknowledged';
  priority: 'High' | 'Medium' | 'Low';
  terminalId: string;
  inactiveDays: number;
}

export interface EmailNotification {
  to: string;
  cc: string;
  subject: string;
  body: string;
  type: 'Terminal Inactive' | 'Performance Alert' | 'Follow-up Required';
}

export class CommunicationService {
  private readonly CC_EMAIL = 'alternativechannels@nbs.co.zw';
  
  async generateInactiveCommunications(): Promise<AutoGeneratedCommunication[]> {
    const processedData = await dataProcessor.getProcessedData();
    const communications: AutoGeneratedCommunication[] = [];
    
    // Find inactive terminals that were previously active
    const inactiveTerminals = processedData.terminalData.filter(terminal => {
      if (terminal.status === 'Active') return false;
      
      // Check if terminal has recent transaction history
      const merchantData = processedData.merchantData.find(m => m.terminalId === terminal.terminalId);
      if (!merchantData) return false;
      
      const lastTransaction = new Date(terminal.lastTransaction);
      const today = new Date();
      const daysDiff = Math.floor((today.getTime() - lastTransaction.getTime()) / (1000 * 60 * 60 * 24));
      
      return daysDiff >= 3; // Terminal inactive for 3+ days
    });
    
    inactiveTerminals.forEach(terminal => {
      const merchantData = processedData.merchantData.find(m => m.terminalId === terminal.terminalId);
      if (!merchantData) return;
      
      const lastTransaction = new Date(terminal.lastTransaction);
      const today = new Date();
      const inactiveDays = Math.floor((today.getTime() - lastTransaction.getTime()) / (1000 * 60 * 60 * 24));
      
      const priority = inactiveDays >= 7 ? 'High' : inactiveDays >= 5 ? 'Medium' : 'Low';
      const actionType = inactiveDays >= 7 ? 'Site Visit' : inactiveDays >= 5 ? 'Phone Call' : 'Email Follow-up';
      
      const communication: AutoGeneratedCommunication = {
        id: `AUTO_${Date.now()}_${terminal.terminalId}`,
        merchantName: terminal.merchantName,
        merchantId: terminal.merchantId,
        type: 'Auto-Generated',
        date: today.toISOString(),
        officer: terminal.officer,
        officerEmail: this.getOfficerEmail(terminal.officer),
        subject: `URGENT: Terminal ${terminal.terminalId} Inactive - ${actionType} Required`,
        notes: this.generateInactiveTerminalMessage(terminal, inactiveDays, actionType),
        followUpDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days from now
        status: 'Pending',
        priority,
        terminalId: terminal.terminalId,
        inactiveDays
      };
      
      communications.push(communication);
    });
    
    return communications;
  }
  
  private generateInactiveTerminalMessage(terminal: any, inactiveDays: number, actionType: string): string {
    return `
TERMINAL INACTIVITY ALERT

Dear ${terminal.officer},

This is an automated notification regarding terminal performance in your portfolio.

TERMINAL DETAILS:
- Terminal ID: ${terminal.terminalId}
- Serial Number: ${terminal.serialNumber}
- Merchant: ${terminal.merchantName}
- Location: ${terminal.location}
- Days Inactive: ${inactiveDays} days
- Last Transaction: ${new Date(terminal.lastTransaction).toLocaleDateString()}

RECOMMENDED ACTION: ${actionType}

${inactiveDays >= 7 ? 
  'URGENT: This terminal has been inactive for over a week. Please conduct an immediate site visit to assess the situation and provide necessary support.' :
  inactiveDays >= 5 ?
  'This terminal requires immediate attention. Please contact the merchant to understand any issues and provide assistance.' :
  'Please follow up with the merchant to ensure terminal is functioning properly and address any concerns.'
}

NEXT STEPS:
1. Contact merchant within 24 hours
2. Document findings and actions taken
3. Update system with resolution status
4. Schedule follow-up if required

Please acknowledge receipt of this notification and update the system once action has been taken.

Best regards,
Terminal Management System
NBS Bank
    `.trim();
  }
  
  private getOfficerEmail(officerName: string): string {
    const emailMap: { [key: string]: string } = {
      'Takudzwa Madyira': 'takudzwa.madyira@nbs.co.zw',
      'Olivia Usai': 'olivia.usai@nbs.co.zw',
      'Tinashe Mariridza': 'tinashe.mariridza@nbs.co.zw',
      'Mufaro Maphosa': 'mufaro.maphosa@nbs.co.zw',
      'Sarah Johnson': 'sarah.johnson@nbs.co.zw',
      'Michael Chen': 'michael.chen@nbs.co.zw',
      'Emily Rodriguez': 'emily.rodriguez@nbs.co.zw',
      'David Thompson': 'david.thompson@nbs.co.zw',
      'Lisa Wang': 'lisa.wang@nbs.co.zw',
      'James Wilson': 'james.wilson@nbs.co.zw'
    };
    
    return emailMap[officerName] || `${officerName.toLowerCase().replace(' ', '.')}@nbs.co.zw`;
  }
  
  generateEmailNotification(communication: AutoGeneratedCommunication): EmailNotification {
    return {
      to: communication.officerEmail,
      cc: this.CC_EMAIL,
      subject: communication.subject,
      body: communication.notes,
      type: 'Terminal Inactive'
    };
  }
  
  async sendEmailNotification(notification: EmailNotification): Promise<boolean> {
    // In a real implementation, this would integrate with an email service
    console.log('Sending email notification:', notification);
    
    // Simulate email sending
    return new Promise((resolve) => {
      setTimeout(() => {
        console.log(`Email sent to ${notification.to}, CC: ${notification.cc}`);
        resolve(true);
      }, 1000);
    });
  }
}

export const communicationService = new CommunicationService();
